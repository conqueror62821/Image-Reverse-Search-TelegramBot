def dict_to_str(items: dict, depth: int = 0, ignore: list = None):
    """Generate string from dict.

    Notes:
        Dict can be multidimensional.

    Args:
        items (:obj:`dict`):
        depth (:obj:`int`): How many whitespaces come in front of the new line times 2
        ignore (:obj:`list`): List of keys to ignore

    Returns:
        :obj:`str`: String with the information generated by the given dict
    """
    ignore = ignore or []
    result = '\n' if depth else ''
    for index, (name, value) in enumerate(items.items()):
        result += '  ' * depth
        if name not in ignore and value:
            value_str = value
            if isinstance(value, list):
                value_str = ', '.join(value)
            elif isinstance(value, dict):
                value_str = dict_to_str(value, depth + 1)
            result += '{name}: {value}'.format(name=name.capitalize(), value=value_str)
            if index + 1 < len(items):
                result += '\n'

    return result
